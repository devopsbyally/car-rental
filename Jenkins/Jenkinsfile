pipeline {
    agent { label 'ecs-agent' } 

    environment {
        SONAR_HOST_URL = "http://3.19.57.33/:9000/"
        SONAR_TOKEN = credentials('jenkins-sonar') // Put your token in Jenkins credentials
        AWS_ACCOUNT_ID = "010526277866"
        AWS_REGION = "us-east-1"  //use your ecr location
        FRONTEND_ECR_REPOSITORY = "car-rental-frontend"
        BACKEND_ECR_REPOSITORY = "car-rental-backend"
        FRONTEND_ECR_NGING_REPOSITORY ="car-rental-frontend-proxy"
        IMAGE_TAG = sh(script: "git rev-parse --short=7 HEAD", returnStdout: true).trim()

    }

    stages {
/*
        stage('Install Frontend Dependencies') {
            steps {
                dir('car-rental-apps-frontend') {
                    sh 'npm install'
                }
            }
        }

        stage('SonarQube Analysis (Frontend)') {
            steps {
                dir('car-rental-apps-frontend') {
                    script {
                        def scannerHome = tool 'SonarQube'
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        stage('Install Backend Dependencies') {
            steps {
                dir('car-rental-apps-backend') {
                    sh 'npm install'
                }
            }
        }

        stage('SonarQube Analysis (Backend)') {
            steps {
                dir('car-rental-apps-backend') {
                    script {
                        def scannerHome = tool 'SonarQube'
                        withSonarQubeEnv('SonarQube') {
                            sh """
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.host.url=${SONAR_HOST_URL} \
                                -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate failed: ${qg.status}"
                        }
                    }
                }
            }
        }
        
        stage('Trivy Filesystem Scan') {
            steps {
                script {
                    // Scan frontend (check node_modules)
                    dir('car-rental-apps-frontend') {
                        sh """
                        trivy --version
                        trivy fs . \
                          --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            
                        """
                    }
                    // Scan backend
                    dir('car-rental-apps-backend') {
                        sh """
                            trivy fs . \
                            --severity HIGH,CRITICAL \
                            --exit-code 1 \
                            
                        """
                    }
                }
            }
        }
*/
        stage('Docker Build & Push Backend, Frontend and Proxy to ECR with Kaniko') {
    steps {
        script { 
            // âœ… Build & Push Backend Image using Kaniko
                sh """
                mkdir -p /root/.docker
                aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com
                cp /root/.docker/config.json /kaniko/.docker/config.json
                echo "ðŸ”§ Building Backend Image..."
                /kaniko/executor \
                   --context=${env.WORKSPACE}/car-rental-apps-backend \
                    --dockerfile=${env.WORKSPACE}/car-rental-apps-backend/Dockerfile \
                    --destination ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.BACKEND_ECR_REPOSITORY}:${env.IMAGE_TAG} 
                echo "ðŸ”§ Building Frontend Image..."
                /kaniko/executor \
                --context=${env.WORKSPACE}/car-rental-apps-frontend \
                --dockerfile=${env.WORKSPACE}/car-rental-apps-frontend/Dockerfile \
                    --destination ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.FRONTEND_ECR_REPOSITORY}:${env.IMAGE_TAG} \
                    --verbosity=debug \
                    --log-format=text 
                echo "ðŸ”§ Building Nginx proxy Image..."
                /kaniko/executor \
                --context=${env.WORKSPACE}/car-rental-apps-frontend \
                --dockerfile=${env.WORKSPACE}/car-rental-apps-frontend/Dockerfile-nginx \
                    --destination ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.FRONTEND_ECR_NGING_REPOSITORY}:${env.IMAGE_TAG} \
                    --verbosity=debug \
                    --log-format=text 
                echo "Image Build Stage Finished!"
                """
            }
        }
    }
/*
            stage('Trivy Image Scan') {
            steps {
                script {
             // Scan frontend nginx proxy image in ECR
            sh """
                trivy image --severity HIGH,CRITICAL --exit-code 0 --ignore-unfixed ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.FRONTEND_ECR_NGING_REPOSITORY}:${env.IMAGE_TAG}
            """
                    // Scan frontend image in ECR
                    sh """
                        trivy image --severity HIGH,CRITICAL --exit-code 0 --ignore-unfixed ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.FRONTEND_ECR_REPOSITORY}:${env.IMAGE_TAG} 
                    """
                    
                    // Scan backend image in ECR
                    sh """
                        trivy image --severity HIGH,CRITICAL --exit-code 0 --ignore-unfixed ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com/${env.BACKEND_ECR_REPOSITORY}:${env.IMAGE_TAG}
                    """
                }
            }
        }

        stage('Check kubectl Version') {
            steps {
                script {
                    sh 'kubectl version --client'
                }
            }
        }

        stage('Validate EKS Connection') {
            steps {
                script {
                    sh 'aws sts get-caller-identity'
                    sh 'aws eks update-kubeconfig --region us-east-2 --name eks-cluster-ny'
                    sh 'kubectl get pods -A'
                    sh 'kubectl get nodes'
                }
            }
        }
        */
    }
}